<Application x:Class="RevitJournalUI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:RevitJournalUI"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Thickness x:Key="NullThick" Left="0" Top="0" Right="0" Bottom="0"/>
        <Thickness x:Key="OneThick" Left="1" Top="1" Right="1" Bottom="1"/>
        <Thickness x:Key="TwoThick" Left="2" Top="2" Right="2" Bottom="2"/>
        <Thickness x:Key="ThreeThick" Left="3" Top="3" Right="3" Bottom="3"/>
        <SolidColorBrush x:Key="DefaultBackground" Color="WhiteSmoke"/>

        <GridLength x:Key="GridFirstColumnWidth">150</GridLength>

        <Style x:Key="UIElement" TargetType="{x:Type FrameworkElement}">
            <Setter Property="Margin" Value="{StaticResource TwoThick}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        
        <Style x:Key="UIControl" TargetType="{x:Type Control}" BasedOn="{StaticResource UIElement}">
            <Setter Property="Padding" Value="{StaticResource ThreeThick}"/>
        </Style>

        <Style x:Key="UILabel" TargetType="{x:Type Label}" BasedOn="{StaticResource UIControl}"> 
        </Style>

        <Style x:Key="UITextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource UIElement}">
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="Padding" Value="{StaticResource ThreeThick}"/>
        </Style>

        <Style x:Key="UITextBoxReadOnly" TargetType="{x:Type TextBox}" BasedOn="{StaticResource UITextBox}">
            <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="IsTabStop" Value="False"/>
        </Style>

        <Style x:Key="UITextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource UIElement}">
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="{StaticResource ThreeThick}"/>
        </Style>

        <Style x:Key="UICheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource UIControl}">
            <Setter Property="Margin" Value="{StaticResource TwoThick}"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>

        <Style x:Key="UIComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource UIControl}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding }" TextTrimming="CharacterEllipsis"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="UIButtonBase" TargetType="{x:Type Button}" BasedOn="{StaticResource UIControl}">
            <Setter Property="Margin" Value="{StaticResource TwoThick}"/>
            <Setter Property="MinWidth" Value="80"/>
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding }" TextTrimming="CharacterEllipsis"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="UIRoundedButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" 
                                   RadiusX="3" RadiusY="3"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                   StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="UIRoundedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource UIButtonBase}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource UIRoundedButtonFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="5"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" 
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" 
                                        Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" 
                                        Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" 
                                        Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" 
                                        Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" 
                                        Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" 
                                        Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" 
                                        Value="{DynamicResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="UIButton" TargetType="{x:Type Button}" BasedOn="{StaticResource UIRoundedButton}">
        </Style>

        <Style x:Key="UIButtonDialog" TargetType="{x:Type Button}" BasedOn="{StaticResource UIButton}">
            <Setter Property="Margin" Value="10, 3, 3, 3"/>
        </Style>

        <Style x:Key="UIListBox" TargetType="{x:Type ListBox}" BasedOn="{StaticResource UIControl}">
            <Setter Property="Margin" Value="{StaticResource TwoThick}"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
        </Style>

        <Style x:Key="UISlider" TargetType="{x:Type Slider}" BasedOn="{StaticResource UIControl}">
            <Setter Property="Interval" Value="1"/>
        </Style>

        <Style x:Key="UIProgressBar" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource UIControl}">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
        </Style>
    </Application.Resources>
</Application>
